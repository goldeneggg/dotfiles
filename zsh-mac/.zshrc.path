#- [mac]PATH environment settings
#-- dmg経由でjavaをインストールした場合はJAVA_HOME関連の設定は不要
#jdk_version="1.8.0_25"
#export JAVA_HOME="/Library/Java/JavaVirtualMachines/jdk${jdk_version}.jdk/Contents/Home"
export SCALA_HOME=/usr/local/scala
export ANDROID_SDK="/Applications/Android Studio.app/sdk"
export GOROOT=/usr/local/go
export GOPATH=$HOME/go
export GOBIN=$GOPATH/bin
export ANYENV_ROOT=$HOME/.anyenv
export PYENV_ROOT=$ANYENV_ROOT/envs/pyenv
export GCP_SDK_HOME=$HOME/google-cloud-sdk
export FLUTTER_ROOT=$HOME/flutter
export CALIBRE_APP=/Applications/calibre.app

#-- zshではシェル変数として"path"を定義すると環境変数PATHと自動連動する
#-- "path"以外に, "cdpath","fpath","manpath" の3つも同様に自動連動
#-- (N-/) を付けた場合、該当パスが存在しなければ無視してくれる
path=(
    #$JAVA_HOME/bin(N-/)
    $HOME/bin(N-/)
    # Omnisharp by NeoBundle of vim
    $HOME/.bundle/Omnisharp/server/OmniSharp/bin/Debug(N-/)
    $HOME/.cabal/bin(N-/)
    # $HOME/.rbenv/bin(N-/)
    # $HOME/.ndenv/bin(N-/)
    # $HOME/.nodebrew/current/bin(N-/)
    $PYENV_ROOT/bin(N-/)
    # $HOME/.phpenv/bin(N-/)
    $HOME/.ebcli-virtual-env/executables(N-/)  # AWS eb-cli
    $GCP_SDK_HOME/bin(N-/)
    $SCALA_HOME/bin(N-/)
    $ANDROID_SDK/platform-tools(N-/)
    $FLUTTER_ROOT/bin(N-/)
    $CALIBRE_APP/Contents/MacOS(N-/)
    $GOBIN(N-/)
    $GOROOT/bin(N-/)
    $OPENSSL11_BREW_ROOT/bin(N-/)  # See: .zshenv.common
    /usr/local/opt/openssl/bin(N-/)
    /usr/local/opt/mysql@5.7/bin(N-/)
    /usr/local/mysql/bin(N-/)
    /usr/local/redis/bin(N-/)
    {/usr/local,/usr,}/bin(N-/)
    {/usr/local,/usr,}/sbin(N-/)
    )
fpath=($HOME/zsh-functions(N-/) $fpath)
manpath=({$HOME/local,/usr/local,/usr}/share/man(N-/))
sudo_path=({,/usr,/usr/local}/sbin(N-/))

#- typeset = declare
#-- typeset -U : 重複要素削除
typeset -U path
typeset -U manpath
#-- typeset -xT : -Tで(シェル変数と環境変数の)2変数の連動関係を築く, -xで環境変数として自動export(第1引数を)
typeset -xT SUDO_PATH sudo_path
typeset -U sudo_path

#- cdpath
#-- `cd hoge/huga` で $GOPATH/src/github.com/hoge/huga へcd出来るようにする
cdpath=(
    $GOPATH/src/github.com/goldeneggg(N-/)
    $GOPATH/src/github.com(N-/)
    $GOPATH/src/code.google.com/p(N-/)
    )

# anyenv brew install前提で（= /usr/local/bin/anyuenv）
[[ -s "/usr/local/bin/anyenv" ]] && eval "$(anyenv init -)"

# # rbenv
# [[ -s "$HOME/.rbenv/bin/rbenv" ]] && eval "$(rbenv init -)"
# 
# # ndenv
# [[ -s "$HOME/.ndenv/bin/ndenv" ]] && eval "$(ndenv init -)"
# 
# # pyenv
# #
# # Note:
# # alias pyenv=... している事例をよく見るが、zshenvを読み込む際にこのaliasが存在している状態で再度 source .zshrc すると、
# # pyenv init - が再実行された際に "(eval):5: parse error near `()'" というエラーが発生する
# # 回避策としては、pyenv init - の前にunalias するとか、aliasの名前を変えておくとかする必要がある
# unalias pyenv 2>/dev/null
# [[ -s "$PYENV_ROOT/bin/pyenv" ]] && eval "$(pyenv init -)"
# [[ -s "$PYENV_ROOT/plugins/pyenv-virtualenv" ]] && eval "$(pyenv virtualenv-init -)"
 
# 2021/05から出始めたwarning対策
# See: https://github.com/pyenv/pyenv/issues/1906 2021/05 に3.9.5にupgradeしたタイミングでこのissueと同内容のwarningが出るようになった
# See: https://zenn.dev/antyuntyun/articles/pyenv_warning_resolve 日本語の解決？記事
eval "$(pyenv init --path)"
if command -v pyenv 1>/dev/null 2>&1
then
  eval "$(pyenv init -)"
fi
# pyenv-virtualenv on anyenv
[[ -s "$PYENV_ROOT/plugins/pyenv-virtualenv" ]] && eval "$(pyenv virtualenv-init -)"
 
# This alias prepare for "ModuleNotFoundError: No module named 'pyexpat'" on "pyenv install"
# See: https://github.com/pyenv/pyenv/issues/1066
# See: https://ja.stackoverflow.com/questions/61604/zshrc-%e3%81%ae%e8%aa%ad%e3%81%bf%e8%be%bc%e3%81%bf%e6%99%82%e3%81%ae%e3%82%a8%e3%83%a9%e3%83%bc%e3%81%ab%e3%81%a4%e3%81%84%e3%81%a6
#alias pyenv-install="SDKROOT=$(xcrun --show-sdk-path) pyenv install"
if [ -x "${OPENSSL11_BREW_ROOT}" ]
then
  alias pyenv="LDFLAGS=\"-L${OPENSSL11_BREW_ROOT}/lib\" CPPFLAGS=\"-I${OPENSSL11_BREW_ROOT}/include\" SDKROOT=$(xcrun --show-sdk-path) pyenv"
else
  alias pyenv="SDKROOT=$(xcrun --show-sdk-path) pyenv"
fi
 
# # phpenv
# [[ -s "$HOME/.phpenv/bin/phpenv" ]] && eval "$(phpenv init -)"

if [ -f ${GCP_SDK_HOME}/path.zsh.inc ]
then
  source ${GCP_SDK_HOME}/path.zsh.inc
fi

if [ -f ${GCP_SDK_HOME}/completion.zsh.inc ]
then
  source ${GCP_SDK_HOME}/completion.zsh.inc
fi

# direnv
[ `which direnv` ] && eval "$(direnv hook zsh)"

# added by travis gem
[ -f /Users/fskmt/.travis/travis.sh ] && source /Users/fskmt/.travis/travis.sh
