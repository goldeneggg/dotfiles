##########
# official environment variables
# See: https://github.com/junegunn/fzf#environment-variables
##########
export FZF_DEFAULT_COMMAND='fd --hidden --exclude ".git" --type f --maxdepth 1'
# - batでファイルの一部をpreviewする: --preview 'bat --color=always --style=numbers --line-range=:500 {}'
export FZF_DEFAULT_OPTS='--layout=reverse --info=inline --height=50% --border'

##########
# official key bindings
# See: https://github.com/junegunn/fzf#key-bindings-for-command-line
#
# Note: キーバインディング系は `$(brew --prefix)/opt/fzf/install` を実施してから検討する（現状未実施）
##########
# export FZF_CTRL_T_COMMAND="TODO:"
# export FZF_CTRL_T_OPTS="TODO:"
# export FZF_CTRL_R_OPTS="TODO:"
# export FZF_ALT_C_COMMAND="TODO:"
# export FZF_ALT_C_OPTS="TODO:"

# 以下はkey-bindingを有効化してそのkey-bindingを実行した時のみ効く設定
# 単に `command | fzf` とか `command | fzf-tmux` しても効く設定では無い
export FZF_TMUX=1
export FZF_TMUX_OPTS='-p90%,60%'

##########
# official completion settings
# See: https://github.com/junegunn/fzf#fuzzy-completion-for-bash-and-zsh
#
# Note: 補完系は `$(brew --prefix)/opt/fzf/install` を実施してから検討する（現状未実施）
##########

# See: https://github.com/junegunn/fzf#settings
# # Use ~~ as the trigger sequence instead of the default **
# export FZF_COMPLETION_TRIGGER='~~'
#
# # Options to fzf command
# export FZF_COMPLETION_OPTS='--border --info=inline'
#
# # Use fd (https://github.com/sharkdp/fd) instead of the default find
# # command for listing path candidates.
# # - The first argument to the function ($1) is the base path to start traversal
# # - See the source code (completion.{bash,zsh}) for the details.
# _fzf_compgen_path() {
#   fd --hidden --follow --exclude ".git" . "$1"
# }
#
# # Use fd to generate the list for directory completion
# _fzf_compgen_dir() {
#   fd --type d --hidden --follow --exclude ".git" . "$1"
# }
#
# # Advanced customization of fzf options via _fzf_comprun function
# # - The first argument to the function is the name of the command.
# # - You should make sure to pass the rest of the arguments to fzf.
# _fzf_comprun() {
#   local command=$1
#   shift
#
#   case "$command" in
#     cd)           fzf --preview 'tree -C {} | head -200'   "$@" ;;
#     export|unset) fzf --preview "eval 'echo \$'{}"         "$@" ;;
#     ssh)          fzf --preview 'dig {}'                   "$@" ;;
#     *)            fzf --preview 'bat -n --color=always {}' "$@" ;;
#   esac
# }

##########
# common settings for tools
##########

fzf_cmd_for_tools() {
  if [[ ${TMUX} ]]
  then
    fzf-tmux ${FZF_TMUX_OPTS} "$@"
  else
    fzf "$@"
  fi
}

fzf_cmd_for_tools_with_preview() {
  local preview_opt="$1"
  shift
  if [[ ${TMUX} ]]
  then
    fzf-tmux ${FZF_TMUX_OPTS} --preview "${preview_opt}" "$@"
  else
    fzf --preview "${preview_opt}" "$@"
  fi
}

##########
# tool.history
##########

#- fzfで履歴表示用コマンド
#CMD_HIST_FZF="fc -l -n 1 | \tail -r | fzf_cmd_for_tools"
CMD_HIST_FZF="fc -l -n 1 | \tail -r | fzf_cmd_for_tools_with_preview 'echo {}'"

function _fzf-history() {
  BUFFER=$(eval "${CMD_HIST_FZF}")
  zle end-of-line
  zle ${1}
}
zle -N _fzf-history

#-- fzfで選択した履歴コマンドを表示
# `Ctrl + p -> s`
function fzf-search-history() {
  zle _fzf-history "clear-screen"
}
zle -N fzf-search-history
bindkey "^ps" fzf-search-history

#-- fzfで選択した履歴コマンドを実行
# `Ctrl + p -> e`
function fzf-execute-history() {
  zle _fzf-history "accept-line"
}
zle -N fzf-execute-history
bindkey "^pe" fzf-execute-history

#-- fzfで選択した履歴コマンドを現在表示中のコマンド末尾にパイプで繋ぐ
# `Ctrl + p -> p`
function fzf-pipe-history() {
  RBUFFER=" | "`eval ${CMD_HIST_FZF}`
  zle end-of-line
  zle clear-screen
}
zle -N fzf-pipe-history
bindkey "^pp" fzf-pipe-history


##########
# tool.directory
##########

#-- fzfでディレクトリスタック間をcd(pushd)
#--- recommend setting: "setopt autp_pushd"
#--- recommend setting: "setopt pushd_ignore_dups"
# `Ctrl + p -> c`
function fzf-dirstack-cd() {
  BUFFER="cd "$(dirs -l -p | tail -n +2 | fzf_cmd_for_tools)
  zle end-of-line
  #zle accept-line
  zle clear-screen
}
zle -N fzf-dirstack-cd
bindkey "^pc" fzf-dirstack-cd


##########
# tool.process-control
##########

#-- process kill -ABRT
# `Ctrl + p -> k`
function fzf-proc-kill() {
  P=$(ps aux | fzf_cmd_for_tools -m | awk '{print $2}')
  if [[ $? -eq 0 && ${P} != "" ]]
  then
    BUFFER="kill -ABRT ${P}"
  fi
  zle clear-screen
}
zle -N fzf-proc-kill
bindkey "^pk" fzf-proc-kill

#-- ssh-agentをkill -ABRT
# `Ctrl + p -> k -> s`
function fzf-ssh-agent-kill() {
  PROCS=$(pgrep ssh-agent | fzf_cmd_for_tools -m | awk '{print $1}' | tr '\n' ' ')
  if [[ $? -eq 0 && -n ${PROCS} ]]
  then
    BUFFER="kill -ABRT ${PROCS}"
  fi
  zle clear-screen
}
zle -N fzf-ssh-agent-kill
bindkey "^pks" fzf-ssh-agent-kill

##########
# tool.git-control
##########

#-- git add
# `Ctrl + p -> g -> a`
function fzf-git-add() {
  BUFFER="git add "$(git status -s | fzf_cmd_for_tools_with_preview 'git diff {2}' -m | awk '{print $2}' | tr '\n' ' ')
  #zle clear-screen
  zle accept-line
}
zle -N fzf-git-add
bindkey "^pga" fzf-git-add

#-- git rm
# `Ctrl + p -> g -> r`
function fzf-git-rm() {
  BUFFER="git rm "$(git status -s | fzf_cmd_for_tools_with_preview 'git diff {2}' -m | awk '{print $2}' | tr '\n' ' ')
  #zle clear-screen
  zle accept-line
}
zle -N fzf-git-rm
bindkey "^pgr" fzf-git-rm

#-- git branch -D
# `Ctrl + p -> g -> d`
function fzf-git-brd() {
  BUFFER="git branch -D "$(git branch | fzf_cmd_for_tools_with_preview 'git diff {1}' -m | awk '{print $1}' | tr '\n' ' ')
  #zle clear-screen
  zle accept-line
}
zle -N fzf-git-brd
bindkey "^pgd" fzf-git-brd

#-- git checkout
# `Ctrl + p -> g -> o`
function fzf-git-co() {
  BUFFER="git checkout "$(git branch | fzf_cmd_for_tools_with_preview 'git diff {1}' | awk '{print $1}' | tr '\n' ' ')
  #zle clear-screen
  zle accept-line
}
zle -N fzf-git-co
bindkey "^pgo" fzf-git-co

#-- git checkout regs/tags/TAG
# `Ctrl + p -> g -> t`
function fzf-git-tagco() {
  BUFFER="git checkout refs/tags/"$(git tag -l | fzf_cmd_for_tools | awk '{print $1}' | tr '\n' ' ')
  #zle clear-screen
  zle accept-line
}
zle -N fzf-git-tagco
bindkey "^pgt" fzf-git-tagco

#-- fzfでコミットハッシュを2つ選択してdiff
function git-pdi() {
  setopt ksharrays  # 0 base array index for zsh
  HASHES=($(git log --pretty="format:%ad %h (%an): %s" --date=iso | fzf_cmd_for_tools -m | awk '{print $4}'))
  if [[ ${#HASHES[@]} -eq 2 ]]
  then
    git diff "${HASHES[1]}".."${HASHES[0]}"
  else
    echo "selected commit count must be 2, but ${#HASHES[@]}"
  fi
}

# 指定ファイルが過去に更新されたpull reqをfzfで一覧表示し、
# 選択したpull reqをブラウザで開く
function openpr-by-file() {
  declare file
  if [[ $# -ne 0 ]]
  then
    file=${1}
  else
    echo "need to assign target file"
    return
  fi
  declare target=${2:-"develop"}

  PRS=$(git pr-list ${file} ${target} | awk 'BEGIN {OFS="\t"} {print NR,$8,$1,$2,$10}' | sed -e 's%#%pull/%g' | fzf_cmd_for_tools)
  gh browse $(echo "${PRS}" | cut -f 2 | awk -F'/' '{print $2}')
}

##########
# tool.grep&vim
##########

#-- grep files => open vim by filename and line number
# `vig ${GREP_STRING}`
function vig {
    STR="$1"
    F=$(\grep -H -n "${STR}" **/* | fzf_cmd_for_tools | awk -F ":" '{print "-c "$2" "$1}')
    if [[ $? -eq 0 && "${F}" != "" ]]
    then
      echo "${F}"
      eval "vim ${F}"
    fi
}

#-- rg(ripgrep) => open vim by filename and line number
# `vig ${GREP_STRING}`
function virg {
    STR="$1"
    F=$(\rg -n --no-heading "${STR}" | fzf_cmd_for_tools | awk -F ":" '{print "-c "$2" "$1}')
    if [[ $? -eq 0 && "${F}" != "" ]]
    then
      eval "vim ${F}"
    fi
}

#-- grep files with target extension => open vim by filename and line number
# `vigext ${GREP_STRING}`
function _vigext {
    STR="$1"
    EXT=$2

    F=$(\grep -H -n "${STR}" "**/*.${EXT}" | fzf_cmd_for_tools | awk -F ":" '{print "-c "$2" "$1}')
    if [[ $? -eq 0 && "${F}" != "" ]]
    then
      eval "vim ${F}"
    fi
}
function _vigextcomex {
    STR="$1"
    EXT=$2
    REGEXP="$3"

    # XXX DIR階層が深すぎる再帰的検索だとgrepがHITしないという挙動が起こる
    F=$(\grep -H -n -E "${STR}" "**/*.${EXT}" | \grep -v ${REGEXP} | fzf_cmd_for_tools | awk -F ":" '{print "-c "$2" "$1}')
    if [[ $? -eq 0 && "${F}" != "" ]]
    then
      eval "vim ${F}"
    fi
}

#-- goファイルをgrep => viで開く
# `vig-go ${GREP_STRING}`
function vig-go {
    STR="$1"
    _vigextcomex "${STR}" "go" "[0-9]:\s*//"
}

#-- rbファイルをgrep => vimで開く
# `vig-rb ${GREP_STRING}`
function vig-rb {
    STR="$1"
    _vigextcomex "${STR}" "rb" "[0-9]:\s*#"
}

#-- rbファイルをメソッド名でgrep => vimで開く
function vig-rb-method {
    STR="$1"
    _vigextcomex "def (self\.)?${STR}" "rb" "[0-9]:\s*#"
}

#-- rbファイルをクラス名/モジュール名でgrep => vimで開く
function vig-rb-class {
    STR="$1"
    _vigextcomex "(class|module) ${STR}" "rb" "[0-9]:\s*#"
}

#-- pyファイルをgrep => vimで開く
function vig-py {
    STR="$1"
    _vigextcomex "${STR}" "py" "[0-9]:\s*#"
}

#-- phpファイルをgrep => viで開く
function vig-php {
    STR="$1"
    _vigextcomex "${STR}" "php" "[0-9]:\s*//"
}

#-- rubocopの結果をvimで開く
function virc {
    DIR="$1"

    F=$(rubocop "${DIR}" | fzf_cmd_for_tools | awk -F ":" '{print "-c "$2" "$1}')
    if [[ $? -eq 0 && "${F}" != "" ]]
    then
      eval "vim ${F}"
    fi
}

##########
# tool.grep&neovim
##########

#-- grep => open neovim by filename and line number
function nvg {
    STR="$1"
    F=$(find . -type f | xargs \grep -H -n "${STR}" | fzf_cmd_for_tools_with_preview 'bat --color=always --style=numbers --line-range={2}:+5 {1}' --delimiter=: | awk -F ":" '{print "-c "$2" "$1}')
    if [[ $? -eq 0 && "${F}" != "" ]]
    then
      echo "${F}"
      eval "nvim ${F}"
    fi
}

function _nvgext {
    STR="$1"
    EXT=$2

    F=$(find . -name "*.${EXT}" | xargs \grep -H -n "${STR}" | fzf_cmd_for_tools_with_preview 'bat --color=always --style=numbers --line-range={2}:+5 {1}' --delimiter=: | awk -F ":" '{print "-c "$2" "$1}')
    if [[ $? -eq 0 && "${F}" != "" ]]
    then
      eval "nvim ${F}"
    fi
}

function _nvgextcomex {
    STR="$1"
    EXT=$2
    REGEXP="$3"

    F=$(find . -name "*.${EXT}" | xargs \grep -H -n -E "${STR}" | \grep -v ${REGEXP} | fzf_cmd_for_tools_with_preview 'bat --color=always --style=numbers --highlight-line {2} --line-range={2}:+5 {1}' --delimiter=: | awk -F ":" '{print "-c "$2" "$1}')
    if [[ $? -eq 0 && "${F}" != "" ]]
    then
      eval "nvim ${F}"
    fi
}

#-- goファイルをgrep => neovimで開く
function nvg-go {
    STR="$1"
    _nvgextcomex "${STR}" "go" "[0-9]:\s*//"
}

#-- rbファイルをgrep => neovimで開く
function nvg-rb {
    STR="$1"
    _nvgextcomex "${STR}" "rb" "[0-9]:\s*#"
}

#-- rbファイルをメソッド名でgrep => neovimで開く
function nvg-rb-method {
    STR="$1"
    _nvgextcomex "def (self\.)?${STR}" "rb" "[0-9]:\s*#"
}

#-- rbファイルをクラス名/モジュール名でgrep => vimで開く
function nvg-rb-class {
    STR="$1"
    _nvgextcomex "(class|module) ${STR}" "rb" "[0-9]:\s*#"
}

#-- pyファイルをgrep => neovimで開く
function nvg-py {
    STR="$1"
    _nvgextcomex "${STR}" "py" "[0-9]:\s*#"
}

##########
# tool.git-grep&neovim
##########

#-- my git grep (or) => open neovim by filename and line number
function nv-gitgr {
    F=$(git gr "$@" | fzf_cmd_for_tools | awk -F ":" '{print "+"$2" "$1}')
    if [[ $? -eq 0 && "${F}" != "" ]]
    then
      echo "${F}"
      eval "nvim ${F}"
    fi
}

#-- my git grep (and) => open neovim by filename and line number
function nv-gitgr-and {
    F=$(git gr-and "$@" | fzf_cmd_for_tools | awk -F ":" '{print "+"$2" "$1}')
    if [[ $? -eq 0 && "${F}" != "" ]]
    then
      echo "${F}"
      eval "nvim ${F}"
    fi
}

##########
# tool.ripgrep&neovim
##########

#-- rg(ripgrep) => open neovim by filename and line number
function nvrg {
    STR="$1"
    F=$(\rg -n --no-heading "${STR}" | fzf_cmd_for_tools | awk -F ":" '{print "-c "$2" "$1}')
    if [[ $? -eq 0 && "${F}" != "" ]]
    then
      eval "nvim ${F}"
    fi
}

function _nvrgextcomex {
    STR="$1"
    EXT=$2
    REGEXP="$3"

    # XXX DIR階層が深すぎる再帰的検索だとgrepがHITしないという挙動が起こる
    F=$(\rg -n --no-heading "${STR}" -t ${EXT} | \grep -v "${REGEXP}" | fzf_cmd_for_tools | awk -F ":" '{print "-c "$2" "$1}')
    if [[ $? -eq 0 && "${F}" != "" ]]
    then
      eval "nvim ${F}"
    fi
}

#-- goファイルをgrep => neovimで開く
function nvrg-go {
    STR="$1"
    _nvrgextcomex "${STR}" "go" "[0-9]:\s*//"
}

#-- rbファイルをgrep => neovimで開く
function nvrg-rb {
    STR="$1"
    _nvrgextcomex "${STR}" "rb" "[0-9]:\s*#"
}

#-- pyファイルをgrep => neovimで開く
function nvrg-py {
    STR="$1"
    _nvrgextcomex "${STR}" "py" "[0-9]:\s*#"
}

##########
# tool.oneliner
##########

#- for oneliner
# Ctrl + p -> o
if [[ -d $ONELINER_DIR ]]
then
  #-- fzfで選択したonelinerコマンドを表示
  function fzf-search-oneliner() {
    BUFFER=$(cat ${ONELINER_DIR}/*.txt | sort | fzf_cmd_for_tools | awk -F"\t" '{print $1}')
    zle clear-screen
    #zle -M "type [ESC-j], kill parameter word and replace into real word"
    zle beginning-of-line
  }
  zle -N fzf-search-oneliner
  bindkey "^po" fzf-search-oneliner
fi

##########
# tool.SSH to EC2 with https://github.com/goldeneggg/lsec2
##########

function fzf-lssh {
    IP=$(lsec2 "$@" | fzf_cmd_for_tools | awk -F "\t" '{print $2}')
    if [[ $? -eq 0 && "${IP}" != "" ]]
    then
      echo ">>> SSH to ${IP}"
      ssh "${IP}"
    fi
}
