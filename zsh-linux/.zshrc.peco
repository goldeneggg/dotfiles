##########1
# history
##########

#- pecoで履歴表示用コマンド
CMD_HIST_PECO="fc -l -n 1 | \tail -r | peco"

function _peco-history() {
  BUFFER=`eval ${CMD_HIST_PECO}`
  zle end-of-line
  zle ${1}
}
zle -N _peco-history

#-- pecoで選択した履歴コマンドを表示
# Ctrl + p -> s
function peco-search-history() {
  zle _peco-history "clear-screen"
}
zle -N peco-search-history
#bindkey "^ps" peco-search-history

#-- pecoで選択した履歴コマンドを実行
# Ctrl + p -> e
function peco-execute-history() {
  zle _peco-history "accept-line"
}
zle -N peco-execute-history
#bindkey "^pe" peco-execute-history

#-- pecoで選択した履歴コマンドを現在表示中のコマンド末尾にパイプで繋ぐ
# Ctrl + p -> p
function peco-pipe-history() {
  RBUFFER=" | "`eval ${CMD_HIST_PECO}`
  zle end-of-line
  zle clear-screen
}
zle -N peco-pipe-history
#bindkey "^pp" peco-pipe-history


##########1
# directory
##########

#-- pecoでディレクトリスタック間をcd(pushd)
#--- recommend setting: "setopt autp_pushd"
#--- recommend setting: "setopt pushd_ignore_dups"
function peco-dirstack-cd() {
  BUFFER="cd "`dirs -l -p | tail -n +2 | peco`
  zle end-of-line
  #zle accept-line
  zle clear-screen
}
zle -N peco-dirstack-cd
#bindkey "^pc" peco-dirstack-cd


##########1
# process control
##########

#-- process kill
# Ctrl + p -> k
function peco-proc-kill() {
  P=$(ps aux | peco | awk '{print $2}')
  if [[ $? -eq 0 && ${P} != "" ]]
  then
    BUFFER="kill -9 "${P}
  fi
  zle clear-screen
}
zle -N peco-proc-kill
#bindkey "^pk" peco-proc-kill

##########1
# gitrocess control
##########

#-- git add
# Ctrl + p -> g -> a
function peco-git-add() {
  BUFFER="git add "$(git status -s | peco | awk '{print $2}' | tr '\n' ' ')
  #zle clear-screen
  zle accept-line
}
zle -N peco-git-add
#bindkey "^pga" peco-git-add

#-- git rm
# Ctrl + p -> g -> r
function peco-git-rm() {
  BUFFER="git rm "$(git status -s | peco | awk '{print $2}' | tr '\n' ' ')
  #zle clear-screen
  zle accept-line
}
zle -N peco-git-rm
#bindkey "^pgr" peco-git-rm

#-- git branch -D
# Ctrl + p -> g -> d
function peco-git-brd() {
  BUFFER="git branch -D "$(git branch | peco | awk '{print $1}' | tr '\n' ' ')
  #zle clear-screen
  zle accept-line
}
zle -N peco-git-brd
#bindkey "^pgd" peco-git-brd

#-- git checkout
# Ctrl + p -> g -> o
function peco-git-co() {
  BUFFER="git checkout "$(git branch | peco | awk '{print $1}' | tr '\n' ' ')
  #zle clear-screen
  zle accept-line
}
zle -N peco-git-co
#bindkey "^pgo" peco-git-co

#-- git checkout regs/tags/TAG
# Ctrl + p -> g -> t
function peco-git-tagco() {
  BUFFER="git checkout refs/tags/"$(git tag -l | peco | awk '{print $1}' | tr '\n' ' ')
  #zle clear-screen
  zle accept-line
}
zle -N peco-git-tagco
#bindkey "^pgt" peco-git-tagco

#-- pecoでコミットハッシュを2つ選択してdiff
function peco-git-pdi() {
  setopt ksharrays  # 0 base array index for zsh
  HASHES=($(git log --pretty="format:%ad %h (%an): %s" --date=iso | peco | awk '{print $4}'))
  if [[ ${#HASHES[@]} -eq 2 ]]
  then
    git diff ${HASHES[1]}..${HASHES[0]}
  else
    echo "selected commit count must be 2, but ${#HASHES[@]}"
  fi
}

# 指定ファイルが過去に更新されたpull reqをpecoで一覧表示し、選択したpull reqをブラウザで開く
function peco-openpr-by-file() {
  declare file
  [[ $# -ne 0 ]] && { file=${1}; } || { echo "need to assign target file"; return; }
  declare target=${2:-"develop"}

  PRS=$(git pr-list ${file} ${target} | awk 'BEGIN {OFS="\t"} {print NR,$8,$1,$2,$10}' | sed -e 's%#%pull/%g' | peco)
  eval "hub browse -- $(echo ${PRS} | cut -f 2)"
}

###########
## grep & vim
###########
#
## grep => open vim by filename and line number
#function vig {
#    STR="$1"
#    F=$(\grep -H -n ${STR} **/* | peco | awk -F ":" '#{print "-c "$2" "$1}')
#    if [[ $? -eq 0 && "${F}" != "" ]]
#    then
#      echo "${F}"
#      eval "vi ${F}"
#    fi
#}
#
## ack => open vim by filename and line number
#function viack {
#    STR="$1"
#    F=$(ack --nocolor ${STR} | peco | awk -F ":" '{print #"-c "$2" "$1}')
#    if [[ $? -eq 0 && "${F}" != "" ]]
#    then
#      eval "vi ${F}"
#    fi
#}
#
## hw => open vim by filename and line number
#function vihw {
#    STR="$1"
#    F=$(hw --nocolor ${STR} | peco | awk -F ":" '{print #"-c "$2" "$1}')
#    if [[ $? -eq 0 && "${F}" != "" ]]
#    then
#      eval "vi ${F}"
#    fi
#}
#
## rg(ripgrep) => open vim by filename and line number
#function virg {
#    STR="$1"
#    F=$(rg -n --no-heading ${STR} | peco | awk -F ":" '#{print "-c "$2" "$1}')
#    if [[ $? -eq 0 && "${F}" != "" ]]
#    then
#      eval "vi ${F}"
#    fi
#}
#
#function _vigext {
#    STR="$1"
#    EXT=$2
#
#    F=$(\grep -H -n ${STR} **/*.${EXT} | peco | awk -F ":" #'{print "-c "$2" "$1}')
#    if [[ $? -eq 0 && "${F}" != "" ]]
#    then
#      eval "vi ${F}"
#    fi
#}
#function _vigextcomex {
#    STR="$1"
#    EXT=$2
#    REGEXP="$3"
#
#    # XXX DIR階層が深すぎる再帰的検索だとgrepがHITしないと#いう挙動が起こる
#    F=$(\grep -H -n -E ${STR} **/*.${EXT} | \grep -v $#{REGEXP} | peco | awk -F ":" '{print "-c "$2" "$1}')
#    if [[ $? -eq 0 && "${F}" != "" ]]
#    then
#      eval "vi ${F}"
#    fi
#}
#
## goファイルをgrep => viで開く
#function vig-go {
#    STR="$1"
#    _vigextcomex "${STR}" "go" "[0-9]:\s*//"
#}
#
## rbファイルをgrep => vimで開く
#function vig-rb {
#    STR="$1"
#    _vigextcomex "${STR}" "rb" "[0-9]:\s*#"
#}
#
## rbファイルをメソッド名でgrep => vimで開く
#function vig-rb-method {
#    STR="$1"
#    _vigextcomex "def (self\.)?${STR}" "rb" "[0-9]:\s*#"
#}
#
## rbファイルをクラス名/モジュール名でgrep => vimで開く
#function vig-rb-class {
#    STR="$1"
#    _vigextcomex "(class|module) ${STR}" "rb" "[0-9]:\s*#"
#}
#
## pyファイルをgrep => vimで開く
#function vig-py {
#    STR="$1"
#    _vigextcomex "${STR}" "py" "[0-9]:\s*#"
#}
#
## phpファイルをgrep => viで開く
#function vig-php {
#    STR="$1"
#    _vigextcomex "${STR}" "php" "[0-9]:\s*//"
#}
#
## rubocopの結果をvimで開く
#function virc {
#    DIR="$1"
#
#    F=$(rubocop ${DIR} | peco | awk -F ":" '{print "-c #"$2" "$1}')
#    if [[ $? -eq 0 && "${F}" != "" ]]
#    then
#      eval "vi ${F}"
#    fi
#}
#
###########1
## grep & neovim
###########
#
## grep => open neovim by filename and line number
#function nvg {
#    STR="$1"
#    F=$(\grep -H -n ${STR} **/* | peco | awk -F ":" '#{print "-c "$2" "$1}')
#    if [[ $? -eq 0 && "${F}" != "" ]]
#    then
#      echo "${F}"
#      eval "nvim ${F}"
#    fi
#}
#
#function _nvgext {
#    STR="$1"
#    EXT=$2
#
#    F=$(\grep -H -n ${STR} **/*.${EXT} | peco | awk -F ":" #'{print "-c "$2" "$1}')
#    if [[ $? -eq 0 && "${F}" != "" ]]
#    then
#      eval "nvim ${F}"
#    fi
#}
#
#function _nvgextcomex {
#    STR="$1"
#    EXT=$2
#    REGEXP="$3"
#
#    # XXX DIR階層が深すぎる再帰的検索だとgrepがHITしないと#いう挙動が起こる
#    F=$(\grep -H -n -E ${STR} **/*.${EXT} | \grep -v $#{REGEXP} | peco | awk -F ":" '{print "-c "$2" "$1}')
#    if [[ $? -eq 0 && "${F}" != "" ]]
#    then
#      eval "nvim ${F}"
#    fi
#}
#
## goファイルをgrep => neovimで開く
#function nvg-go {
#    STR="$1"
#    _nvgextcomex "${STR}" "go" "[0-9]:\s*//"
#}
#
## rbファイルをgrep => neovimで開く
#function nvg-rb {
#    STR="$1"
#    _nvgextcomex "${STR}" "rb" "[0-9]:\s*#"
#}
#
## rbファイルをメソッド名でgrep => neovimで開く
#function nvg-rb-method {
#    STR="$1"
#    _nvgextcomex "def (self\.)?${STR}" "rb" "[0-9]:\s*#"
#}
#
## rbファイルをクラス名/モジュール名でgrep => vimで開く
#function nvg-rb-class {
#    STR="$1"
#    _nvgextcomex "(class|module) ${STR}" "rb" "[0-9]:\s*#"
#}
#
## pyファイルをgrep => neovimで開く
#function nvg-py {
#    STR="$1"
#    _nvgextcomex "${STR}" "py" "[0-9]:\s*#"
#}
#
###########1
## git grep & neovim
###########
#
## my git grep (or) => open neovim by filename and line #number
#function nv-gitgr {
#    F=$(git gr $@ | peco | awk -F ":" '{print "+"$2" "$1}')
#    if [[ $? -eq 0 && "${F}" != "" ]]
#    then
#      echo "${F}"
#      eval "nvim ${F}"
#    fi
#}
#
## my git grep (and) => open neovim by filename and line #number
#function nv-gitgr-and {
#    F=$(git gr-and $@ | peco | awk -F ":" '{print "+"$2" #"$1}')
#    if [[ $? -eq 0 && "${F}" != "" ]]
#    then
#      echo "${F}"
#      eval "nvim ${F}"
#    fi
#}
#
###########1
## ripgrep & neovim
###########
#
## rg(ripgrep) => open neovim by filename and line number
#function nvrg {
#    STR="$1"
#    F=$(rg -n --no-heading ${STR} | peco | awk -F ":" '#{print "-c "$2" "$1}')
#    if [[ $? -eq 0 && "${F}" != "" ]]
#    then
#      eval "nvim ${F}"
#    fi
#}
#
#function _nvrgextcomex {
#    STR="$1"
#    EXT=$2
#    REGEXP="$3"
#
#    # XXX DIR階層が深すぎる再帰的検索だとgrepがHITしないと#いう挙動が起こる
#    F=$(rg -n --no-heading ${STR} **/*.${EXT} | \grep -v $#{REGEXP} | peco | awk -F ":" '{print "-c "$2" "$1}')
#    if [[ $? -eq 0 && "${F}" != "" ]]
#    then
#      eval "nvim ${F}"
#    fi
#}
#
## goファイルをgrep => neovimで開く
#function nvrg-go {
#    STR="$1"
#    _nvrgextcomex "${STR}" "go" "[0-9]:\s*//"
#}
#
## rbファイルをgrep => neovimで開く
#function nvrg-rb {
#    STR="$1"
#    _nvrgextcomex "${STR}" "rb" "[0-9]:\s*#"
#}
#
## pyファイルをgrep => neovimで開く
#function nvrg-py {
#    STR="$1"
#    _nvrgextcomex "${STR}" "py" "[0-9]:\s*#"
#}

##########1
# oneliner
##########

#- for oneliner
# Ctrl + p -> o
if [[ -d $ONELINER_DIR ]]
then
  #-- pecoで選択したonelinerコマンドを表示
  function peco-search-oneliner() {
    BUFFER=$(cat ${ONELINER_DIR}/*.txt | sort | peco | awk -F"\t" '{print $1}')
    zle clear-screen
    #zle -M "type [ESC-j], kill parameter word and replace into real word"
    zle beginning-of-line
  }
  zle -N peco-search-oneliner
  #bindkey "^po" peco-search-oneliner
fi

##########
# SSH to EC2 with https://github.com/goldeneggg/lsec2
##########

function peco-lssh {
    IP=$(lsec2 $@ | peco | awk -F "\t" '{print $2}')
    if [[ $? -eq 0 && "${IP}" != "" ]]
    then
      echo ">>> SSH to ${IP}"
      ssh ${IP}
    fi
}
