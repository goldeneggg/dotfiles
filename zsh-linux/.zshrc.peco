#- pecoで履歴表示用コマンド
CMD_HIST_PECO="fc -l -n 1 | tail -r | peco"

function _peco-history() {
  BUFFER=`eval ${CMD_HIST_PECO}`
  zle end-of-line
  zle ${1}
}
zle -N _peco-history

#-- pecoで選択した履歴コマンドを表示
function peco-search-history() {
  zle _peco-history "clear-screen"
}
zle -N peco-search-history
bindkey "^ps" peco-search-history

#-- pecoで選択した履歴コマンドを実行
function peco-execute-history() {
  zle _peco-history "accept-line"
}
zle -N peco-execute-history
bindkey "^pe" peco-execute-history

#-- pecoで選択した履歴コマンドを現在表示中のコマンド末尾にパイプで繋ぐ
function peco-pipe-history() {
  RBUFFER=" | "`eval ${CMD_HIST_PECO}`
  zle end-of-line
  zle clear-screen
}
zle -N peco-pipe-history
bindkey "^pp" peco-pipe-history


#- for oneliner
if [[ -d $ONELINER_DIR ]]
then
  #-- pecoで選択したonelinerコマンドを表示
  function peco-search-oneliner() {
    BUFFER=$(cat ${ONELINER_DIR}/*.txt | sort | peco | awk -F"\t" '{print $1}')
    zle clear-screen
    #zle -M "type [ESC-j], kill parameter word and replace into real word"
    zle beginning-of-line
  }
  zle -N peco-search-oneliner
  bindkey "^po" peco-search-oneliner
fi

##########1
# grep & vim
##########

# grep => open vim by filename and line number
function vig {
    STR="$1"
    F=$(\grep -H -n ${STR} **/* | peco | awk -F ":" '{print "-c "$2" "$1}')
    if [ $? -eq 0 -a "${F}" != "" ]
    then
      echo "${F}"
      eval "vi ${F}"
    fi
}

# ack => open vim by filename and line number
function viack {
    STR="$1"
    F=$(ack --nocolor ${STR} | peco | awk -F ":" '{print "-c "$2" "$1}')
    if [ $? -eq 0 -a "${F}" != "" ]
    then
      eval "vi ${F}"
    fi
}

# hw => open vim by filename and line number
function vihw {
    STR="$1"
    F=$(hw --nocolor ${STR} | peco | awk -F ":" '{print "-c "$2" "$1}')
    if [ $? -eq 0 -a "${F}" != "" ]
    then
      eval "vi ${F}"
    fi
}

function _vigext {
    STR="$1"
    EXT=$2

    F=$(\grep -H -n ${STR} **/*.${EXT} | peco | awk -F ":" '{print "-c "$2" "$1}')
    if [ $? -eq 0 -a "${F}" != "" ]
    then
      eval "vi ${F}"
    fi
}
function _vigextcomex {
    STR="$1"
    EXT=$2
    REGEXP="$3"

    # XXX DIR階層が深すぎる再帰的検索だとgrepがHITしないという挙動が起こる
    F=$(\grep -H -n -E ${STR} **/*.${EXT} | \grep -v ${REGEXP} | peco | awk -F ":" '{print "-c "$2" "$1}')
    if [ $? -eq 0 -a "${F}" != "" ]
    then
      eval "vi ${F}"
    fi
}

# goファイルをgrep => viで開く
function vigg {
    STR="$1"
    _vigextcomex "${STR}" "go" "[0-9]:\s*//"
}

function vigp {
    STR="$1"
    _vigextcomex "${STR}" "php" "[0-9]:\s*//"
}

function vigs {
    STR="$1"
    _vigextcomex "${STR}" "scala" "[0-9]:\s*//"
}

# rbファイルをgrep => vimで開く
function vigr {
    STR="$1"
    _vigextcomex "${STR}" "rb" "[0-9]:\s*#"
}

# rbファイルをメソッド名でgrep => vimで開く
function vigr_method {
    STR="$1"
    _vigextcomex "def (self\.)?${STR}" "rb" "[0-9]:\s*#"
}

# rbファイルをクラス名/モジュール名でgrep => vimで開く
function vigr_class_module {
    STR="$1"
    _vigextcomex "(class|module) ${STR}" "rb" "[0-9]:\s*#"
}

function vigcf {
    STR="$1"
    _vigextcomex "${STR}" "coffee" "[0-9]:\s*#"
}

##########1
# grep & neovim
##########

# grep => open neovim by filename and line number
function nvg {
    STR="$1"
    F=$(\grep -H -n ${STR} **/* | peco | awk -F ":" '{print "-c "$2" "$1}')
    if [ $? -eq 0 -a "${F}" != "" ]
    then
      echo "${F}"
      eval "nvim ${F}"
    fi
}

# hw => open neovim by filename and line number
function nvhw {
    STR="$1"
    F=$(hw --nocolor ${STR} | peco | awk -F ":" '{print "-c "$2" "$1}')
    if [ $? -eq 0 -a "${F}" != "" ]
    then
      eval "nvim ${F}"
    fi
}

function _nvgext {
    STR="$1"
    EXT=$2

    F=$(\grep -H -n ${STR} **/*.${EXT} | peco | awk -F ":" '{print "-c "$2" "$1}')
    if [ $? -eq 0 -a "${F}" != "" ]
    then
      eval "nvim ${F}"
    fi
}
function _nvgextcomex {
    STR="$1"
    EXT=$2
    REGEXP="$3"

    # XXX DIR階層が深すぎる再帰的検索だとgrepがHITしないという挙動が起こる
    F=$(\grep -H -n -E ${STR} **/*.${EXT} | \grep -v ${REGEXP} | peco | awk -F ":" '{print "-c "$2" "$1}')
    if [ $? -eq 0 -a "${F}" != "" ]
    then
      eval "nvim ${F}"
    fi
}

# goファイルをgrep => neovimで開く
function nvgg {
    STR="$1"
    _nvgextcomex "${STR}" "go" "[0-9]:\s*//"
}

# rbファイルをgrep => neovimで開く
function nvgr {
    STR="$1"
    _nvgextcomex "${STR}" "rb" "[0-9]:\s*#"
}

# rbファイルをメソッド名でgrep => neovimで開く
function nvgr_method {
    STR="$1"
    _nvgextcomex "def (self\.)?${STR}" "rb" "[0-9]:\s*#"
}

# rbファイルをクラス名/モジュール名でgrep => vimで開く
function nvgr_class_module {
    STR="$1"
    _nvgextcomex "(class|module) ${STR}" "rb" "[0-9]:\s*#"
}

#- process control
#-- process kill
function peco-proc-kill() {
  P=$(ps aux | peco | awk '{print $2}')
  if [ $? -eq 0 -a ${P} != "" ]
  then
    BUFFER="kill -9 "${P}
  fi
  zle clear-screen
}
zle -N peco-proc-kill
bindkey "^pk" peco-proc-kill

#- for git
function peco-git-add() {
  BUFFER="git add "$(git status -s | peco | awk '{print $2}' | tr '\n' ' ')
  #zle clear-screen
  zle accept-line
}
zle -N peco-git-add
bindkey "^pga" peco-git-add

function peco-git-rm() {
  BUFFER="git rm "$(git status -s | peco | awk '{print $2}' | tr '\n' ' ')
  #zle clear-screen
  zle accept-line
}
zle -N peco-git-rm
bindkey "^pgr" peco-git-rm

function peco-git-brd() {
  BUFFER="git branch -D "$(git branch | peco | awk '{print $1}' | tr '\n' ' ')
  #zle clear-screen
  zle accept-line
}
zle -N peco-git-brd
bindkey "^pgd" peco-git-brd

function peco-git-co() {
  BUFFER="git checkout "$(git branch | peco | awk '{print $1}' | tr '\n' ' ')
  #zle clear-screen
  zle accept-line
}
zle -N peco-git-co
bindkey "^pgo" peco-git-co

#-- pecoでディレクトリスタック間をcd(pushd)
#--- recommend setting: "setopt autp_pushd"
#--- recommend setting: "setopt pushd_ignore_dups"
function peco-dirstack-cd() {
  BUFFER="cd "`dirs -l -p | tail -n +2 | peco`
  zle end-of-line
  #zle accept-line
  zle clear-screen
}

zle -N peco-dirstack-cd
bindkey "^pc" peco-dirstack-cd

#-- pecoでコミットハッシュを2つ選択してdiff
function git-pdi() {
  setopt ksharrays  # 0 base array index for zsh
  HASHES=($(git log --pretty="format:%ad %h (%an): %s" --date=iso | peco | awk '{print $4}'))
  if [ ${#HASHES[@]} -eq 2 ]
  then
    git diff ${HASHES[1]}..${HASHES[0]}
  else
    echo "selected commit count must be 2, but ${#HASHES[@]}"
  fi
}

# rubocopの結果をvimで開く
function virc {
    DIR="$1"

    F=$(rubocop ${DIR} | peco | awk -F ":" '{print "-c "$2" "$1}')
    if [ $? -eq 0 -a "${F}" != "" ]
    then
      eval "vi ${F}"
    fi
}

# 指定ファイルが過去に更新されたpull reqをpecoで一覧表示し、選択したpull reqをブラウザで開く
function openpr-by-file() {
  declare file
  [ $# -ne 0 ] && { file=${1}; } || { echo "need to assign target file"; return; }
  declare target=${2:-"develop"}

  PRS=$(git pr-list ${file} ${target} | awk 'BEGIN {OFS="\t"} {print NR,$8,$1,$2,$10}' | sed -e 's%#%pull/%g' | peco)
  eval "hub browse -- $(echo ${PRS} | cut -f 2)"
}

# ssh using private ip of lsec2's result
function lssh {
    IP=$(lsec2 $@ | peco | awk -F "\t" '{print $2}')
    if [ $? -eq 0 -a "${IP}" != "" ]
    then
      echo ">>> SSH to ${IP}"
      ssh ${IP}
    fi
}

