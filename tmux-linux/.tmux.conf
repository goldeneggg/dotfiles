#####
# 初期設定
#####
# prefix keyをCtrl-tに変更
unbind C-b
set -g prefix C-t
bind C-t send-prefix
# 256色
set -g default-terminal "screen-256color"
# シェルで色を確認するスクリプト
#    fgbg=("38" "48")  # 38 = fg, 48 = bg
#    for fb in ${fgbg[@]}
#    do
#      for i in {0..255} ; do
#        printf "\x1b[${fb};5;${i}mcolour${i}\n"
#      done
#    done
# スクロールバック
set -g history-limit 10000


#####
# キーバインド
#####
# `PREFIX C-r` - tmux.confの再読み込み
bind C-r source-file ~/.tmux.conf \; display "Reloaded!"
# `PREFIX- C-h`で1つ手前のウインドウをアクティブ化, その後prefix無しでC-hを連続押下したらさらに手前のウインドウへ(`-r`で実現)
bind -r C-h select-window -t :-
# `PREFIX- C-l`で1つ後ろのウインドウをアクティブ化, その後prefix無しでC-lを連続押下したらさらに手前のウインドウへ(`-r`で実現)
bind -r C-l select-window -t :+
# vim風キーバインドでペイン間を移動
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
# 元々のlに設定されてた前回選択ウインドウの再選択(last-window)は C-t へ割り当てる(screen風)
## prefix C-t は、コマンド実行中ウインドウで押下するとロードアベレージが表示されるが、この機能は無効化
bind C-t last-window
# ペインのサイズ変更
bind H resize-pane -L 5
bind J resize-pane -D 5
bind K resize-pane -U 5
bind L resize-pane -R 5


#####
# モードkey
#####
# = vi
setw -g mode-keys vi

#####
# copy mode
#####
source-file ~/.tmux.conf.copymode


#####
# マウス
#####
# マウスでの操作を有効化 (iTerm使用時は "Enable xterm mouse reporting" をONにする)
# マウスドラッグ（からのC-c）によるクリップボード連携が効かなくなる
# が、iTerm2ならOptionを押しながらドラッグすれば通常のドラッグ時同様にクリップボードにコピーされる
setw -g mode-mouse on


#####
# ウインドウ
#####
# ウインドウの開始番号=1
set -g base-index 1


#####
# ペイン
#####
# ペインの開始番号=1
setw -g pane-base-index 1
# ペインのローテート(Ctrl-o)を無効化  *あまり使わないし、ペイン移動(o)とキーストロークが近くてよく誤るので*
unbind C-o
# 境界線
set -g pane-border-fg colour237
set -g pane-border-bg colour233
set -g pane-active-border-fg colour82
set -g pane-active-border-bg colour233


#####
# ステータスバー
#####
## utf8を有効に
set -g status-utf8 on
## 描画間隔
set -g status-interval 2
## ウインドウリストの位置
set -g status-justify left
## サイズ
#set -g status-left-length 60
#set -g status-right-length 90
### カラー
#set -g status-fg white
#set -g status-bg black
### 固定表示
#set -g status-left "<#S @#h> "
#set -g status-right "[%Y-%m-%d(%a) %H:%M]"
## tmux-powerline使用
##set -g status-left "#(~/tmux-powerline/powerline.sh left)"
##set -g status-right "#(~/tmux-powerline/powerline.sh right)"
## ウインドウ表示部
#setw -g window-status-current-fg white
#setw -g window-status-current-bg brightred

## ** using powerline **
if-shell 'test -z "$POWERLINE_CONFIG_COMMAND"' 'set-environment -g POWERLINE_CONFIG_COMMAND powerline-config'
run-shell 'eval $POWERLINE_CONFIG_COMMAND tmux source'
### カラー
set -g status-fg colour231
set -g status-bg colour234
### 左部分
set -g status-left-length 20
set -qg status-left '#{?client_prefix,#[fg=colour254]#[bg=colour31]#[bold],#[fg=colour16]#[bg=colour254]#[bold]} #S #{?client_prefix,#[fg=colour31]#[bg=colour234]#[nobold],#[fg=colour254]#[bg=colour234]#[nobold]}#(eval $POWERLINE_COMMAND tmux left)'
### 右部分
set -g status-right-length 150
#set -g status-right '#(eval $POWERLINE_COMMAND tmux right -R pane_id=`tmux display -p "#D"`)'
set -g status-right "[%Y-%m-%d(%a) %H:%M]"
### ウインドウ
set -g window-status-format "#[fg=colour244,bg=colour234]  #I #[fg=colour240] #[default]#W "
set -g window-status-current-format "#[fg=colour234,bg=colour31]#[fg=colour117,bg=colour31] #I  #[fg=colour231,bold]#W #[fg=colour31,bg=colour234,nobold]"
setw -g window-status-fg colour249
set -qg window-status-last-fg colour31
setw -g window-status-activity-attr none
setw -g window-status-activity-fg yellow
setw -g window-status-bell-attr none
setw -g window-status-bell-fg red
