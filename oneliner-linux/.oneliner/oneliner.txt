while true ;do ls /proc/`ps -ef | \grep %%PROC_NAME | \grep -v grep | awk '{print $2}'`/fd | wc -l ;sleep 1 ;done	特定のプロセスが使用しているファイルディスクリプタを1秒ごとに表示
watch --interval=1 'netstat -ent | \grep %%WORD'	#TCPの通信発生を1秒毎に確認
wget --user=%%USER --password=%%PASS %%URL	#wget BASIC認証有り
wget -q -O - %%URL	#転送情報を出力せず、wgetの結果だけを"標準出力に"出力する
wget https://www.ugtop.com/spill.shtml -O - 2>/dev/null | \grep 'font size=+2 color=blue'	#自分のpublic IPを調べる
du /home --max-depth=1 | sort -nr	#/home直下の使用容量を降順表示
du -h | egrep '^[0-9\.]+M' | sort -nr	#MB以上のサイズのファイル・ディレクトリを降順表示
find . -type f -daystart -ctime -1 | xargs ls -lrt	#カレントディレクトリ下の当日更新されたファイルを再帰的に検索して日時昇順で表示
sudo strace -s 1024 -f -p %%PID	#指定したPIDのプロセスのUNIXドメインソケット通信内容を確認する
vim $(grep -n "\sgo .*(" **/*.go | \grep -v "[0-9]:\s*//" | fzf | awk -F ":" '{print "-c "$2" "$1}')	#[golang]ゴルーチンを起動しているgoのソースを検索して、行番号指定でvimで開く
nvim $(grep -n "\sgo .*(" **/*.go | \grep -v "[0-9]:\s*//" | fzf | awk -F ":" '{print "-c "$2" "$1}')	#[golang]ゴルーチンを起動しているgoのソースを検索して、行番号指定でnvimで開く
df -i	#割り当て可能な(Inodes),使用中の(IUsed),未割り当ての(IFree)inode数を表示する
stat %%FILE	#ファイルの詳細な統計情報を表示する。inode番号とか
find / -xdev -type f	#xdevオプションで、 / ファイル・システムのみに限定して検索する,xdevが無い場合/usrとか/varとかNFS等の他のファイルシステムも検索対象になる
sudo echo %%NUM > /proc/sys/vm/drop_caches	#ファイルシステムのキャッシュをクリアする(1=ページキャッシュ,2=ディレクトリエントリ(dentry)とinode,3=1と2の両方)
grep Dirty /proc/meminfo	#ダーティオブジェクトのサイズを表示する
sync	#バッファ(メモリ上のデータ)の内容を強制的にディスクに書き込みバッファをフラッシュし)、ダーティオブジェクトをクリアする
dig -f %%DIGFILE	#digコマンドを羅列したファイルを指定してバッチモードでdigを実行する,バッチモード用ファイルの記法やオプションは通常のコマンド実行時と同じ
for v in $(vagrant status | \grep %%VMSTR | awk '{print $1}'); do echo "=== $v" && vagrant ssh -c '%%CMD' $v; done	#[vagrant]VMSTRにmatchする全てのvmでCMDを実行する,vagrantコマンド使用
for v in $(VBoxManage list runningvms | \grep %%VMSTR | awk -F"_" '{print $2}'); do echo "=== $v" && vagrant ssh -c '%%CMD' $v; done	#[vagrant]VMSTRにmatchする全てのvmでCMDを実行する,VBoxManage使用
time -f '%Uu %Ss %er %MkB %C' "$@"	#[prof]timeコマンドの出力結果を見やすくしてコマンドプロファイリングする(https://blog.golang.org/profiling-go-programs)
[[ -x `which %%CMD` ]] && %%CMD %%ARGS	#[shell]CMDで指定したコマンドが存在していれば実行する
ctags --langmap=Ruby:.rb --exclude="*.js"  --exclude=".git*" -R .	#[ctags][ruby]カレントディレクトリ下のrubyソース群に対して再帰的にctagを生成
type %%CMD >/dev/null 2>&1	#[sh]コマンドの存在チェックを行う
find . -type f -name "*.go" | xargs sed -i "" 's|%%BEFORE|%%AFTER|g'	#[sed]カレントディレクトリ下のgoファイルを再帰的に置換
%%CMD | tee %%FILE	#[tee]コマンドの標準出力を表示しつつファイルにも出力
%%CMD 2>&1 | tee %%FILE	#[tee]コマンドの標準出力とエラー出力を表示しつつファイルにも出力
diff <(%%CMD1) <(%%CMD2)	#[プロセス置換][process substition]2つのコマンドの実行結果を一時ファイルを作成せずにdiff取る
sh -c 'echo $1' one two	#[sh -c]sh -cでコマンドを実行する。このとき引数indexは0ベース($0が第1引数)になる
grep device-mapper /proc/devices	#[ubuntu]device-mapperが利用されているか確認する
