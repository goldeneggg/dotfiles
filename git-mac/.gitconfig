[user]
  name = %GITHUB_USER%
  email = %GITHUB_MAIL%
[core]
  autocrlf = input
  excludesfile = ~/.gitignore_global
[color]
  ui = auto
#[url "git@github.com:"]
    #insteadOf = https://github.com/
[credential]
  helper = osxkeychain
[credential "https://github.com"]
  username = %GITHUB_USER%
[pager]
  diff = diff-so-fancy | less --tabs=1,5 -RFX
  show = diff-so-fancy | less --tabs=1,5 -RFX
  log = diff-so-fancy | less --tabs=1,5 -RFX
[alias]
  # fetch,pull,checkout
  ft = fetch
  fa = fetch --all
  ftpr = fetch origin +refs/pull/*:refs/remotes/pullreq/*
  pl = pull
  plr = pull --rebase
  co = checkout
  # push
  pushforce = push --force-with-lease
  # branch
  br = branch
  brv = branch -v
  bra = branch -a
  brva = branch -v -a
  # status,diff
  st = status
  sst = status -s
  di = diff --ignore-space-change
  dia = diff
  dic = diff --ignore-space-change --cached
  dis = diff --ignore-space-change --patch-with-stat
  di1 = diff --ignore-space-change HEAD~
  di2 = diff --ignore-space-change HEAD~~
  di3 = diff --ignore-space-change HEAD~~~
  di4 = diff --ignore-space-change HEAD~~~~
  di5 = diff --ignore-space-change HEAD~~~~~
  di10 = diff --ignore-space-change HEAD~~~~~~~~~~
  # add,commit,merge
  ci = commit -v
  ciam = commit -v --amend
  ciemp = commit -v --allow-empty
  cifix = commit --fixup
  mg = merge
  mgnf = merge --no-ff
  cherry = cherry-pick
  # log
  bl = blame
  sh = show
  wc = whatchanged
  hist = log --pretty=\"format:%ad %C(yellow)%h %C(cyan)(%an)%Creset: %s\" --date=iso
  histc = log --pretty=\"format:%cd %C(yellow)%h %C(cyan)(%cn)%Creset: %s\" --date=iso
  logs = log --stat --date=iso
  logp = log -p --date=iso
  logr = log origin --date=iso
  oneline = log --pretty=oneline
  ranking = shortlog -s -n --no-merges
  log-graph = log --graph --date=short --pretty=format:'%h %cd %C(cyan)%cn %Creset%s'
  log-all = log --graph --all --color --pretty='%x09%h %C(cyan)%cn%Creset%x09%s %Cred%d%Creset'
  hashes = log --pretty=format:%h --follow
  # list
  ls = ls-files -oc --exclude-standard
  # remote
  rev = remote -v
  rea = remote add
  # submodule
  sub = submodule
  subup = submodule update
  subupi = submodule update --init
  # rebase
  reb = rebase
  # grep
  ## fixed string
  gr = grep -I --full-name -F -n --color
  ## ignore matching
  gri = grep -I --full-name -F -n --color -i
  ## regex
  grr = grep -I --full-name -n --color
  ## target is indexed files
  grc = grep --cached -I --full-name -F -n --color
  ## merge commit
  ### 該当commit hashとターゲットブランチを指定
  find-merge = "!sh -c 'commit=$0 && branch=${1:-HEAD} && (git rev-list $commit..$branch --ancestry-path | cat -n; git rev-list $commit..$branch --first-parent | cat -n) | sort -k2 | uniq -f1 -d | sort -n | tail -1 | cut -f2'"
  ### find-mergeの結果をgit logする
  show-merge = "!sh -c 'merge=$(git find-merge $0 $1) && [ -n \"$merge\" ] && git log --pretty=\"format:%ad %h %s\" --date=iso $merge | head -n 1'"
  ## pull request
  show-pr = !"f() { git log --merges --pretty=\"format:%ad %h %s\" --date=iso --reverse --ancestry-path $1...${2:-master} | grep 'Merge pull request #' | head -n 1; }; f"
  pr-list = "!sh -c 'hashes=($(git hashes $0)) && for hash in ${hashes[@]}; do git show-pr ${hash} ${1:-master}; done | sort | uniq'"
  pr-list2 = "!sh -c 'hashes=($(git hashes $0)) && for hash in ${hashes[@]}; do git show-merge ${hash} ${1:-master} | grep \"pull request #\"; done | sort | uniq'"
  ## using hub
  open = browse
  pullreq = pull-request
  openpr = "!f() { hub browse -- `git log --merges --oneline --reverse --ancestry-path $1...master | grep 'Merge pull request #' | head -n 1 | cut -f5 -d' ' | sed -e 's%#%pull/%'`; }; f"
